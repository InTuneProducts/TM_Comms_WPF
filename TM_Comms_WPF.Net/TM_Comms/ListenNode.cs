 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TM_Comms_WPF
{
    public partial class ListenNode
    {
        public const string StartByte = "$";
        public const string Separator = ",";
        public const string ChecksumSign = "*";
        public const string EndBytes = "\r\n";

        public enum HEADERS
        { 
            TMSCT, //External Script
            TMSTA, //Aquire status or properties
            CPERR  //Communication data error
        }

        public ListenNode()
        {
            this.Header = HEADERS.TMSCT;
            this.Data = "";
        }
        public ListenNode(HEADERS header = HEADERS.TMSCT, string data = "")
        {
            this.Header = header;
            this.Data = data;
        }

        public HEADERS Header { get; set; } 
        public string Data { get; set; }

        public string HeaderString => Header.ToString();
        public int ScriptID { get; private set; } = new Random().Next(256); 
        public int Length
        {
            get
            {
                if(Header == HEADERS.TMSCT)
                    return  ScriptID.ToString().Length + Separator.Length + Data.Length;
                else
                    return "00".Length;
            }
        }
        public byte Checksum => CalCheckSum();
        public string ChecksumString=> CalCheckSum().ToString("X2");

        public string Message
        {
            get
            {
                if (Header == HEADERS.TMSCT)
                    return $"{StartByte}{HeaderString}{Separator}{Length}{Separator}{ScriptID}{Separator}{Data}{Separator}{ChecksumSign}{ChecksumString}{EndBytes}";
                return $"{StartByte}{HeaderString}{Separator}{Length}{Separator}00{Separator}{ChecksumSign}{ChecksumString}{EndBytes}";
            }
        }

        private byte CalCheckSum()
        {
            Byte _CheckSumByte = 0x00;
            Byte[] bData;

            if (Header == HEADERS.TMSCT)
                bData = Encoding.ASCII.GetBytes($"{HeaderString}{Separator}{Length}{Separator}{ScriptID}{Separator}{Data}{Separator}");
            else
                bData = Encoding.ASCII.GetBytes($"{HeaderString}{Separator}{Length}{Separator}00{Separator}");
            
            for (int i = 0; i < bData.Length; i++)
                _CheckSumByte ^= bData[i];
            return _CheckSumByte;
        }
    }

    public partial class ListenNode
    {
        public enum CommandList
        {
            FUNCTIONS,
            PARAMETERIZED_OBJECTS,
            MATH_FUNCTIONS,
            MODBUS_FUNCTIONS,
            SERIAL_PORT_FUNCTIONS,
            ROBOT_MOTION_FUNCTIONS,
            ETHERNET_SLAVE
        }

        public static Dictionary<TMflowVersions, List<string>> Commands = new Dictionary<TMflowVersions, List<string>>()
        {
            {TMflowVersions.V1_80_3300, new List<string>() {
               { "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append(?[],? or ?[])" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert(?[],int,? or ?[])" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove(?[],int,int)" },
{ "?[] Array_Remove(?[],int)" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.34 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.35 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.37 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.39 Length()" },
{ "int Length(?)" },
{ "2.40 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.41 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.42 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.43 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.44 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.45 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.46 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.47 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.48 ListenSend()" },
{ "int ListenSend(string,int,?)" },
{ "int ListenSend(int,?)" },
{ "2.49 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 com_read()" },
{ "byte[] com_read(string)" },
{ "byte[] com_read(string,int,int)" },
{ "byte[] com_read(string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string)" },
{ "byte[] com_read(string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string)" },
{ "5.2 com_read_string()" },
{ "string com_read_string(string)" },
{ "string com_read_string(string,int,int)" },
{ "string com_read_string(string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string)" },
{ "string com_read_string(string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string)" },
{ "5.3 com_write()" },
{ "bool com_write(string,?)" },
{ "bool com_write(string,?,int,int)" },
{ "bool com_write(string,?,int)" },
{ "5.4 com_writeline()" },
{ "bool com_writeline(string,?)" },
{ "bool com_writeline(string,?,int,int)" },
{ "bool com_writeline(string,?,int)" },
{ "8.1 QueueTag()" },
{ "bool QueueTag(int,int)" },
{ "bool QueueTag(int)" },
{ "8.2 WaitQueueTag()" },
{ "int WaitQueueTag(int,int)" },
{ "int WaitQueueTag(int)" },
{ "8.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "8.4 Pause()" },
{ "bool Pause()" },
{ "8.5 Resume()" },
{ "bool Resume()" },
{ "8.6 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "8.7 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.8 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "8.9 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "8.10 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.11 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.12 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "8.13 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "8.14 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "8.15 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "8.16 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "8.17 PVTExit()" },
{ "bool PVTExit()" },
{ "8.18 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "8.19 PVTPause()" },
{ "bool PVTPause()" },
{ "8.20 PVTResume()" },
{ "bool PVTResume()" },
{ "8.21 socket_send()" },
{ "int socket_send(string,int,?int,int,)" },
{ "int socket_send(string,int,?)" },
{ "9.1 GUI Setting" },
{ "9.2 svr_read()" },
{ "? svr_read(string)" },
{ "9.3 svr_write()" },
{ "bool svr_write(string,?)" },

                            }
                        },
            {TMflowVersions.V1_76_3300, new List<string>() {

                { "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append(?[],? or ?[])" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert(?[],int,? or ?[])" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove(?[],int,int)" },
{ "?[] Array_Remove(?[],int)" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.34 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.35 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.37 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.39 Length()" },
{ "int Length(?)" },
{ "2.40 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.41 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.42 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.43 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.44 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.45 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.46 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.47 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.48 ListenSend()" },
{ "int ListenSend(string,int,?)" },
{ "int ListenSend(int,?)" },
{ "2.49 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 com_read()" },
{ "byte[] com_read(string)" },
{ "byte[] com_read(string,int,int)" },
{ "byte[] com_read(string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string)" },
{ "byte[] com_read(string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string)" },
{ "5.2 com_read_string()" },
{ "string com_read_string(string)" },
{ "string com_read_string(string,int,int)" },
{ "string com_read_string(string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string)" },
{ "string com_read_string(string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string)" },
{ "5.3 com_write()" },
{ "bool com_write(string,?)" },
{ "bool com_write(string,?,int,int)" },
{ "bool com_write(string,?,int)" },
{ "5.4 com_writeline()" },
{ "bool com_writeline(string,?)" },
{ "bool com_writeline(string,?,int,int)" },
{ "bool com_writeline(string,?,int)" },
{ "8.1 QueueTag()" },
{ "bool QueueTag(int,int)" },
{ "bool QueueTag(int)" },
{ "8.2 WaitQueueTag()" },
{ "int WaitQueueTag(int,int)" },
{ "int WaitQueueTag(int)" },
{ "8.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "8.4 Pause()" },
{ "bool Pause()" },
{ "8.5 Resume()" },
{ "bool Resume()" },
{ "8.6 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "8.7 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.8 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "8.9 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "8.10 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.11 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.12 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "8.13 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "8.14 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "8.15 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "8.16 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "8.17 PVTExit()" },
{ "bool PVTExit()" },
{ "8.18 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "8.19 PVTPause()" },
{ "bool PVTPause()" },
{ "8.20 PVTResume()" },
{ "bool PVTResume()" },
{ "8.21 socket_send()" },
{ "int socket_send(string,int,?int,int,)" },
{ "int socket_send(string,int,?)" },
{ "9.1 GUI Setting" },
{ "9.2 svr_read()" },
{ "? svr_read(string)" },
{ "9.3 svr_write()" },
{ "bool svr_write(string,?)" },


            }
            },
                        {TMflowVersions.V1_72_xxxx, new List<string>() {
{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append(?[],? or ?[])" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert(?[],int,? or ?[])" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove(?[],int,int)" },
{ "?[] Array_Remove(?[],int)" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.34 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.35 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.37 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.39 Length()" },
{ "int Length(?)" },
{ "2.40 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.41 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.42 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.43 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.44 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.45 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.46 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.47 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.48 ListenSend()" },
{ "int ListenSend(string,int,?)" },
{ "int ListenSend(int,?)" },
{ "2.49 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 com_read()" },
{ "byte[] com_read(string)" },
{ "byte[] com_read(string,int,int)" },
{ "byte[] com_read(string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string)" },
{ "byte[] com_read(string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string)" },
{ "5.2 com_read_string()" },
{ "string com_read_string(string)" },
{ "string com_read_string(string,int,int)" },
{ "string com_read_string(string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string)" },
{ "string com_read_string(string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string)" },
{ "5.3 com_write()" },
{ "bool com_write(string,?)" },
{ "bool com_write(string,?,int,int)" },
{ "bool com_write(string,?,int)" },
{ "5.4 com_writeline()" },
{ "bool com_writeline(string,?)" },
{ "bool com_writeline(string,?,int,int)" },
{ "bool com_writeline(string,?,int)" },
{ "8.1 QueueTag()" },
{ "bool QueueTag(int,int)" },
{ "bool QueueTag(int)" },
{ "8.2 WaitQueueTag()" },
{ "int WaitQueueTag(int,int)" },
{ "int WaitQueueTag(int)" },
{ "8.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "8.4 Pause()" },
{ "bool Pause()" },
{ "8.5 Resume()" },
{ "bool Resume()" },
{ "8.6 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "8.7 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.8 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "8.9 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "8.10 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.11 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.12 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "8.13 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "8.14 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "8.15 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "8.16 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "8.17 PVTExit()" },
{ "bool PVTExit()" },
{ "8.18 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "8.19 PVTPause()" },
{ "bool PVTPause()" },
{ "8.20 PVTResume()" },
{ "bool PVTResume()" },
{ "8.21 socket_send()" },
{ "int socket_send(string,int,?int,int,)" },
{ "int socket_send(string,int,?)" },
{ "9.1 GUI Setting" },
{ "9.2 svr_read()" },
{ "? svr_read(string)" },
{ "9.3 svr_write()" },
{ "bool svr_write(string,?)" },

            }
        },
                {TMflowVersions.V1_68_6800, new List<string>() {
 { "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.24 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.25 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.26 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.27 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.28 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.29 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.30 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.31 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.32 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.33 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.34 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.35 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.36 Length()" },
{ "int Length(?)" },
{ "2.37 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.38 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.39 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.40 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.41 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.42 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.43 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.44 RMS_VarSync()" },
{ "int RMS_VarSync(int,int,?)" },
{ "int RMS_VarSync(int,?)" },
{ "int RMS_VarSync(?)" },
{ "2.45 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "3.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "3.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "3.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "3.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "3.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "3.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "3.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "5.2 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "5.3 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "5.4 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "5.5 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "5.6 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "5.7 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "5.8 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "5.9 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "5.10 ChangeLoad()" },
{ "bool ChangeLoad(float)" },



                }
            }
        };
    }
}
